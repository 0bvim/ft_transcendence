name: ${PROJECT_NAME:-ft_transcendence}

services:
  # Core application services
  ms-frontend:
    container_name: frontend
    build:
      context: ./packages
      dockerfile: ./ms-frontend/Dockerfile
      target: development
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./packages/ms-frontend/src:/app/src
      - ./packages/ms-frontend/assets:/app/assets
      - ./packages/ms-frontend/public:/app/public
      - ./packages/ms-frontend/package.json:/app/package.json
      - ./packages/ms-frontend/tsconfig.json:/app/tsconfig.json
      - ./packages/ms-frontend/vite.config.ts:/app/vite.config.ts
      - ./packages/ms-frontend/tailwind.config.js:/app/tailwind.config.js
    networks:
      - ${NETWORK_NAME:-ft-net}
    # depends_on:
    #   - logstash

  ms-auth:
    container_name: authentication
    build:
      context: ./packages
      dockerfile: ./ms-auth/Dockerfile
      target: development
    ports:
      - "3001:3001"
    volumes:
      - ./packages/ms-auth/prisma:/app/prisma
      - ./packages/ms-auth/src:/app/src
    networks:
      - ${NETWORK_NAME:-ft-net}
    # depends_on:
    #   logstash:
    #     condition: service_healthy

  ms-game:
    container_name: game
    build:
      context: ./packages
      dockerfile: ./ms-game/Dockerfile
    env_file: ./packages/ms-game/.env
    ports:
      - "${GAME_PORT:-3002}:3002"
    networks:
      - ${NETWORK_NAME:-ft-net}
    # depends_on:
    #   logstash:
    #     condition: service_healthy

  ms-tournament:
    container_name: tournament
    build:
      context: ./packages
      dockerfile: ./ms-tournament/Dockerfile
      target: development
    ports:
      - "${TOURNAMENT_PORT:-3003}:3003"
    environment:
      - PORT=3003
      - DATABASE_URL=file:./tournament.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AUTH_SERVICE_URL=http://authentication:3001
      - GAME_SERVICE_URL=http://game:3003
      - BLOCKCHAIN_SERVICE_URL=http://blockchain:3004
    volumes:
      - ./packages/ms-tournament/src:/app/src
      - ./packages/ms-tournament/prisma:/app/prisma
    networks:
      - ${NETWORK_NAME:-ft-net}
    depends_on:
      #    logstash:
      #      condition: service_healthy
      ms-blockchain:
        condition: service_started

  ms-blockchain-node:
    container_name: blockchain-node
    build:
      context: ./packages
      dockerfile: ./ms-blockchain/Dockerfile
      target: development
    command: npx hardhat node --hostname 0.0.0.0 --port 3005
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
    networks:
      - ${NETWORK_NAME:-ft-net}
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "wget --no-verbose --tries=1 --spider http://127.0.0.1:3005 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  ms-blockchain:
    container_name: blockchain
    build:
      context: ./packages
      dockerfile: ./ms-blockchain/Dockerfile
      target: prod
    ports:
      - "${BLOCKCHAIN_PORT:-3004}:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL:-https://api.avax-test.network/ext/bc/C/rpc}
      - AVALANCHE_CHAIN_ID=${AVALANCHE_CHAIN_ID:-43113}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - TOURNAMENT_SERVICE_URL=http://tournament:3003
      - AUTH_SERVICE_URL=http://authentication:3001
      - GAS_LIMIT=${GAS_LIMIT:-3000000}
      - GAS_PRICE=${GAS_PRICE:-20000000000}
    networks:
      - ${NETWORK_NAME:-ft-net}
    # depends_on:
    #   logstash:
    #     condition: service_healthy

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-9.0.2}
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - _JAVA_OPTIONS=${ES_JAVA_OPTS:--Xms512m -Xmx512m}
      - ES_JAVA_OPTS=-Xms512m -Xmx512m -Dlog4j2.formatMsgNoLookups=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED:-true}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - ${NETWORK_NAME:-ft-net}
    volumes:
      - ${ELASTICSEARCH_DATA_VOLUME:-esdata}:/usr/share/elasticsearch/data
      - ./devops/certs:/usr/share/elasticsearch/config/certs
      - ./devops/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  #    healthcheck:
  #      test:
  #        [
  #          "CMD-SHELL",
  #          "curl -k -u elastic:${ELASTIC_PASSWORD:-changeme} -f https://localhost:9200/_cluster/health?pretty || exit 1"
  #        ]
  #      interval: 30s
  #      timeout: 10s
  #      retries: 5
  #      start_period: 120s

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION:-9.0.2}
    container_name: kibana
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - _JAVA_OPTIONS=${ELASTICSEARCH_JAVA_OPTS:--Xms512m -Xmx512m}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-https://elasticsearch:9200}
      - ELASTICSEARCH_USERNAME=${KIBANA_ES_USER:-kibana_system}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${XPACK_SECURITY_ENCRYPTIONKEY:-a_secure_32_character_string_123}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY:-a_secure_32_character_string_456}
      - XPACK_REPORTING_ENCRYPTIONKEY=${XPACK_REPORTING_ENCRYPTIONKEY:-a_secure_32_character_string_789}
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    volumes:
      - ./devops/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./devops/certs:/usr/share/kibana/config/certs:ro
    networks:
      - ${NETWORK_NAME:-ft-net}

  logstash:
    image: docker.elastic.co/logstash/logstash:${LOGSTASH_VERSION:-9.0.2}
    container_name: logstash
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - _JAVA_OPTIONS=${ELASTICSEARCH_JAVA_OPTS:--Xms512m -Xmx512m}
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-https://elasticsearch:9200}
      - ELASTICSEARCH_USER=${LOGSTASH_ES_USER:-logstash_system}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/logstash/config/certs/ca.crt
    networks:
      - ${NETWORK_NAME:-ft-net}
    volumes:
      - ./devops/logstash/pipeline:/usr/share/logstash/pipeline
      - ./devops/logstash/config:/usr/share/logstash/config
      - ./devops/certs:/usr/share/logstash/config/certs
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f https://localhost:9600/_node/stats || exit 1"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    user: root
    networks:
      - ${NETWORK_NAME:-ft-net}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ${PROMETHEUS_CONFIG_PATH:-./devops/prometheus/prometheus.yml}:/etc/prometheus/prometheus.yml
      - ${PROMETHEUS_ALERTS_PATH:-./devops/prometheus/alerts.yml}:/etc/prometheus/alerts.yml
      - ./devops/prometheus/web-config.yml:/etc/prometheus/web-config.yml
      - ./devops/certs:/etc/prometheus/certs
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.config.file=/etc/prometheus/web-config.yml"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    user: root
    networks:
      - ${NETWORK_NAME:-ft-net}
    ports:
      - "${GRAFANA_PORT:-3006}:3000"
    volumes:
      - ${GRAFANA_PROVISIONING_PATH:-./devops/grafana/provisioning}:/etc/grafana/provisioning
      - ${GRAFANA_DATA_VOLUME:-grafana-data}:/var/lib/grafana
      - ./devops/certs:/etc/grafana/certs
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/grafana/certs/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/grafana/certs/grafana.key
    depends_on:
      - prometheus
      # - elasticsearch

volumes:
  esdata:
  grafana-data:

networks:
  ft-net:
    driver: bridge
