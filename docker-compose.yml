name: ${PROJECT_NAME:-ft_transcendence}

services:
  # Core application services
  ms-frontend:
    container_name: frontend
    build:
      context: ./packages
      dockerfile: ./ms-frontend/Dockerfile
      target: development
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./packages/ms-frontend/src:/app/src
      - ./packages/ms-frontend/assets:/app/assets
      - ./packages/ms-frontend/public:/app/public
      - ./packages/ms-frontend/package.json:/app/package.json
      - ./packages/ms-frontend/tsconfig.json:/app/tsconfig.json
      - ./packages/ms-frontend/vite.config.ts:/app/vite.config.ts
      - ./packages/ms-frontend/tailwind.config.js:/app/tailwind.config.js
    networks:
      - ${NETWORK_NAME:-ft-net}
    depends_on:
      - logstash

  ms-auth:
    container_name: authentication
    build:
      context: ./packages
      dockerfile: ./ms-auth/Dockerfile
      target: development
    ports:
      - "3001:3001"
    environment:
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-https://localhost:3000/auth/google/callback}
      - WEBAUTHN_RP_ID=${WEBAUTHN_RP_ID:-localhost}
      - WEBAUTHN_RP_NAME=${WEBAUTHN_RP_NAME:-ft_transcendence}
      - WEBAUTHN_ORIGIN=${WEBAUTHN_ORIGIN:-https://localhost:3000}
    volumes:
      - ./packages/ms-auth/prisma:/app/prisma
      - ./packages/ms-auth/src:/app/src
    networks:
      - ${NETWORK_NAME:-ft-net}
    depends_on:
      logstash:
        condition: service_healthy

  ms-game:
    container_name: game
    build:
      context: ./packages
      dockerfile: ./ms-game/Dockerfile
    env_file: ./packages/ms-game/.env
    ports:
      - "${GAME_PORT:-3002}:3002"
    networks:
      - ${NETWORK_NAME:-ft-net}
    depends_on:
      logstash:
        condition: service_healthy

  ms-tournament:
    container_name: tournament
    build:
      context: ./packages
      dockerfile: ./ms-tournament/Dockerfile
      target: development
    ports:
      - "${TOURNAMENT_PORT:-3003}:3003"
    environment:
      - PORT=3003
      - DATABASE_URL=file:./tournament.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AUTH_SERVICE_URL=http://authentication:3001
      - GAME_SERVICE_URL=http://game:3002
      - BLOCKCHAIN_SERVICE_URL=http://blockchain:3004
    volumes:
      - ./packages/ms-tournament/src:/app/src
      - ./packages/ms-tournament/prisma:/app/prisma
    networks:
      - ${NETWORK_NAME:-ft-net}
    depends_on:
      logstash:
        condition: service_healthy
      ms-blockchain:
        condition: service_started

  ms-blockchain-node:
    container_name: blockchain-node
    build:
      context: ./packages
      dockerfile: ./ms-blockchain/Dockerfile
      target: development
    command: npx hardhat node --hostname 0.0.0.0 --port 3005
    ports:
      - "${BLOCKCHAIN_NODE_PORT:-3005}:3005"
    environment:
      - NODE_ENV=development
    networks:
      - ${NETWORK_NAME:-ft-net}
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3005 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  ms-blockchain:
    container_name: blockchain
    build:
      context: ./packages
      dockerfile: ./ms-blockchain/Dockerfile
      target: development
    ports:
      - "${BLOCKCHAIN_PORT:-3004}:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL:-https://api.avax-test.network/ext/bc/C/rpc}
      - AVALANCHE_CHAIN_ID=${AVALANCHE_CHAIN_ID:-43113}
      - PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - TOURNAMENT_SCORING_CONTRACT_ADDRESS=${TOURNAMENT_SCORING_CONTRACT_ADDRESS}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - TOURNAMENT_SERVICE_URL=http://tournament:3003
      - AUTH_SERVICE_URL=http://authentication:3001
      - GAS_LIMIT=${GAS_LIMIT:-3000000}
      - GAS_PRICE=${GAS_PRICE:-20000000000}
    volumes:
      - ./packages/ms-blockchain/src:/app/src
      - ./packages/ms-blockchain/contracts:/app/contracts
      - ./packages/ms-blockchain/scripts:/app/scripts
    networks:
      - ${NETWORK_NAME:-ft-net}
    depends_on:
      logstash:
        condition: service_healthy

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-9.0.2}
    environment:
      - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE:-single-node}
      - ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS:--Xms512m -Xmx512m}
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED:-false}
      - "_JAVA_OPTIONS=${ELASTICSEARCH_JAVA_OPTIONS:--XX:UseSVE=0}"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - ${NETWORK_NAME:-ft-net}
    volumes:
      - ${ELASTICSEARCH_DATA_VOLUME:-esdata}:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: ${ELASTICSEARCH_HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${ELASTICSEARCH_HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${ELASTICSEARCH_HEALTH_CHECK_RETRIES:-5}

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION:-9.0.2}
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=${KIBANA_ELASTICSEARCH_HOSTS:-http://elasticsearch:9200}
      - xpack.security.enabled=${KIBANA_SECURITY_ENABLED:-false}
      - "_JAVA_OPTIONS=${KIBANA_JAVA_OPTIONS:--XX:UseSVE=0}"
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - ${NETWORK_NAME:-ft-net}

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:${LOGSTASH_VERSION:-9.0.2}
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "${LOGSTASH_HTTPS_PORT:-5001}:5001"
      - "${LOGSTASH_HTTP_PORT:-9600}:9600"
    environment:
      - LS_JAVA_OPTS=${LOGSTASH_JAVA_OPTS:--Xmx256m -Xms256m}
    networks:
      - ${NETWORK_NAME:-ft-net}
    volumes:
      - ./devops/logstash/pipeline:/usr/share/logstash/pipeline
      - ./devops/logstash/config:/usr/share/logstash/config
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ${PROMETHEUS_CONFIG_PATH:-./devops/prometheus/prometheus.yml}:/etc/prometheus/prometheus.yml
      - ${PROMETHEUS_ALERTS_PATH:-./devops/prometheus/alerts.yml}:/etc/prometheus/alerts.yml
    networks:
      - ${NETWORK_NAME:-ft-net}

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    volumes:
      - ${GRAFANA_PROVISIONING_PATH:-./devops/grafana/provisioning}:/etc/grafana/provisioning
      - ${GRAFANA_DATA_VOLUME:-grafana-data}:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGN_UP:-false}
    depends_on:
      - prometheus
      - elasticsearch
    networks:
      - ${NETWORK_NAME:-ft-net}

volumes:
  esdata:
  grafana-data:

networks:
  ft-net:
    driver: bridge
