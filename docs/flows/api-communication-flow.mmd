graph LR
    %% Frontend API Calls
    subgraph "Frontend Service :3010"
        FE[Frontend SPA<br/>Vite + TypeScript]
    end
    
    %% Authentication Service APIs
    subgraph "Authentication Service :3001"
        AuthAPI[Auth API]
        AuthEndpoints["POST /api/auth/register<br/>POST /api/auth/login<br/>POST /api/auth/refresh<br/>POST /api/auth/google/callback<br/>POST /api/auth/setup-2fa<br/>POST /api/auth/verify-2fa<br/>GET /api/auth/profile<br/>PUT /api/auth/profile<br/>DELETE /api/auth/profile<br/>POST /api/auth/upload-avatar"]
        AuthDB[(PostgreSQL<br/>Users, Tokens, 2FA)]
    end
    
    %% Tournament Service APIs  
    subgraph "Tournament Service :3002"
        TournamentAPI[Tournament API]
        TournamentEndpoints["GET /tournaments<br/>POST /tournaments<br/>GET /tournaments/:id<br/>POST /tournaments/:id/join<br/>POST /tournaments/:id/start<br/>POST /matches/:id/result<br/>GET /matches/:id<br/>GET /user-stats/:id"]
        TournamentDB[(SQLite<br/>Tournaments, Matches)]
    end
    
    %% Game Service APIs
    subgraph "Game Service :3003"
        GameAPI[Game API]
        GameEndpoints["GET /tournament/:tournamentId/match/:matchId<br/>GET /api/tournament/match/:matchId<br/>POST /api/tournament/match/result<br/>GET / (Serve game HTML)"]
        GameStatic[Static Game Files<br/>p5.js, CSS, Assets]
    end
    
    %% Blockchain Service APIs
    subgraph "Blockchain Service :3004" 
        BlockchainAPI[Blockchain API]
        BlockchainEndpoints["POST /api/blockchain/tournaments<br/>POST /api/blockchain/participants<br/>POST /api/blockchain/start<br/>POST /api/blockchain/match-results<br/>POST /api/blockchain/complete<br/>GET /api/blockchain/tournament/:id<br/>GET /api/blockchain/health"]
        SmartContract[Avalanche Smart Contract<br/>TournamentScoring.sol]
    end
    
    %% External Services
    GoogleOAuth[Google OAuth API]
    AvalancheNetwork[Avalanche Network]
    
    %% Frontend to Services
    FE -->|"POST /api/auth/*"| AuthAPI
    FE -->|"GET/POST /tournaments/*"| TournamentAPI  
    FE -->|"GET /tournament/:id/match/:id"| GameAPI
    FE -->|"GET/POST /api/blockchain/*"| BlockchainAPI
    
    %% Service to Service Communication
    TournamentAPI -->|"POST /api/blockchain/tournaments<br/>POST /api/blockchain/participants<br/>POST /api/blockchain/match-results"| BlockchainAPI
    GameAPI -->|"GET /matches/:id<br/>POST /matches/:id/result"| TournamentAPI
    
    %% External API Integration
    AuthAPI -->|"OAuth Flow"| GoogleOAuth
    BlockchainAPI -->|"Smart Contract Calls"| AvalancheNetwork
    
    %% Database Connections
    AuthAPI --> AuthDB
    TournamentAPI --> TournamentDB
    
    %% Blockchain Integration
    BlockchainAPI --> SmartContract
    SmartContract --> AvalancheNetwork
    
    %% API Response Formats
    subgraph "Response Formats"
        StandardResponse["{<br/>  success: boolean,<br/>  data: T,<br/>  message: string<br/>}"]
        AuthResponse["{<br/>  accessToken: string,<br/>  refreshToken: string,<br/>  user: UserProfile<br/>}"]
        TournamentResponse["{<br/>  id: string,<br/>  name: string,<br/>  status: 'WAITING'|'ACTIVE'|'COMPLETED',<br/>  participants: Player[],<br/>  matches: Match[]<br/>}"]
    end
    
    %% Error Handling
    subgraph "Error Responses"
        ErrorFormats["400 Bad Request<br/>401 Unauthorized<br/>403 Forbidden<br/>404 Not Found<br/>422 Validation Error<br/>500 Internal Server Error"]
        ErrorStructure["{<br/>  success: false,<br/>  error: string,<br/>  details?: object<br/>}"]
    end
    
    %% Authentication Flow
    subgraph "JWT Authentication"
        JWTFlow["1. Login/Register â†’ JWT tokens<br/>2. Store in localStorage<br/>3. Include in Authorization header<br/>4. Validate on protected routes<br/>5. Refresh when expired"]
    end
    
    %% Styling
    classDef frontend fill:#e1f5fe
    classDef auth fill:#f3e5f5  
    classDef tournament fill:#e8f5e8
    classDef game fill:#fff3e0
    classDef blockchain fill:#fce4ec
    classDef external fill:#f5f5f5
    classDef database fill:#e0f2f1
    
    class FE frontend
    class AuthAPI,AuthEndpoints auth
    class TournamentAPI,TournamentEndpoints tournament  
    class GameAPI,GameEndpoints,GameStatic game
    class BlockchainAPI,BlockchainEndpoints,SmartContract blockchain
    class GoogleOAuth,AvalancheNetwork external
    class AuthDB,TournamentDB database 