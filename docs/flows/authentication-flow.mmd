sequenceDiagram
    participant User as Web Browser
    participant Frontend as Frontend Service
    participant Auth as Auth Service
    participant Google as Google OAuth
    participant DB as Auth Database
    
    %% Registration Flow
    Note over User, DB: User Registration
    User->>Frontend: POST /register
    Frontend->>Auth: POST /api/auth/register
    Auth->>Auth: Hash password
    Auth->>DB: Store user data
    Auth->>Auth: Generate JWT tokens
    Auth-->>Frontend: {accessToken, refreshToken, user}
    Frontend-->>User: Registration success
    
    %% Login Flow
    Note over User, DB: Standard Login
    User->>Frontend: POST /login
    Frontend->>Auth: POST /api/auth/login
    Auth->>DB: Verify credentials
    Auth->>Auth: Generate JWT tokens
    Auth-->>Frontend: {accessToken, refreshToken, user}
    Frontend->>Frontend: Store tokens in localStorage
    Frontend-->>User: Login success, redirect to dashboard
    
    %% Google OAuth Flow
    Note over User, DB: Google OAuth Login
    User->>Frontend: Click "Sign in with Google"
    Frontend->>Google: Redirect to OAuth consent
    Google-->>User: OAuth consent page
    User->>Google: Grant permissions
    Google->>Frontend: Redirect with auth code
    Frontend->>Auth: POST /api/auth/google/callback
    Auth->>Google: Exchange code for tokens
    Google-->>Auth: User profile & tokens
    Auth->>DB: Create/update user
    Auth->>Auth: Generate JWT tokens
    Auth-->>Frontend: {accessToken, refreshToken, user}
    Frontend-->>User: Login success
    
    %% 2FA Setup Flow
    Note over User, DB: Two-Factor Authentication Setup
    User->>Frontend: Enable 2FA
    Frontend->>Auth: POST /api/auth/setup-2fa
    Auth->>Auth: Generate TOTP secret
    Auth->>DB: Store 2FA secret
    Auth-->>Frontend: {qrCode, backupCodes}
    Frontend-->>User: Display QR code
    User->>Frontend: Enter TOTP code
    Frontend->>Auth: POST /api/auth/verify-2fa
    Auth->>Auth: Verify TOTP code
    Auth->>DB: Enable 2FA for user
    Auth-->>Frontend: 2FA enabled
    
    %% 2FA Login Flow
    Note over User, DB: 2FA Login
    User->>Frontend: POST /login (with 2FA enabled)
    Frontend->>Auth: POST /api/auth/login
    Auth->>DB: Verify credentials
    Auth-->>Frontend: {requires2FA: true}
    Frontend-->>User: Show 2FA input
    User->>Frontend: Enter TOTP/backup code
    Frontend->>Auth: POST /api/auth/verify-2fa
    Auth->>Auth: Verify 2FA code
    Auth->>Auth: Generate JWT tokens
    Auth-->>Frontend: {accessToken, refreshToken, user}
    
    %% Token Refresh Flow
    Note over User, DB: JWT Token Refresh
    Frontend->>Frontend: Access token expired
    Frontend->>Auth: POST /api/auth/refresh
    Note right of Frontend: Include refreshToken
    Auth->>DB: Validate refresh token
    Auth->>Auth: Generate new tokens
    Auth-->>Frontend: {accessToken, refreshToken}
    Frontend->>Frontend: Update stored tokens
    
    %% API Request with Auth
    Note over User, DB: Authenticated API Request
    User->>Frontend: Access protected resource
    Frontend->>Auth: API request + Authorization header
    Note right of Frontend: Bearer {accessToken}
    Auth->>Auth: Validate JWT token
    Alt token valid
        Auth-->>Frontend: Protected resource data
        Frontend-->>User: Display data
    Else token invalid/expired
        Auth-->>Frontend: 401 Unauthorized
        Frontend->>Frontend: Redirect to login
    End 