sequenceDiagram
    participant User as Web Browser
    participant Frontend as Frontend Service
    participant Tournament as Tournament Service
    participant Game as Game Service
    participant Blockchain as Blockchain Service
    participant Avalanche as Avalanche Network
    participant DB as Tournament DB
    
    %% Tournament Creation
    Note over User, DB: Tournament Creation
    User->>Frontend: Create tournament form
    Frontend->>Tournament: POST /tournaments
    Note right of Frontend: {name, maxPlayers, tournamentType, aiDifficulty}
    Tournament->>DB: Store tournament data
    Tournament->>Blockchain: POST /tournaments
    Note right of Tournament: Register tournament on blockchain
    Blockchain->>Avalanche: Deploy tournament contract
    Avalanche-->>Blockchain: Contract address
    Blockchain-->>Tournament: {success, contractAddress}
    Tournament->>DB: Update with contract address
    Tournament-->>Frontend: {tournament, id}
    Frontend-->>User: Redirect to tournament detail
    
    %% Tournament Joining
    Note over User, DB: Player Joins Tournament
    User->>Frontend: Click "Join Tournament"
    Frontend->>Tournament: POST /tournaments/:id/join
    Note right of Frontend: {userId, displayName}
    Tournament->>DB: Add participant
    Tournament->>Blockchain: POST /participants
    Note right of Tournament: Add participant to contract
    Blockchain->>Avalanche: Update contract participants
    Avalanche-->>Blockchain: Transaction hash
    Blockchain-->>Tournament: {success, txHash}
    Tournament-->>Frontend: {success, tournament}
    Frontend-->>User: "Successfully joined!"
    
    %% Tournament Start & Match Generation
    Note over User, DB: Tournament Starts (Auto or Manual)
    Tournament->>Tournament: Check if ready to start
    Note right of Tournament: maxPlayers reached or manual start
    Tournament->>DB: Generate match bracket
    Tournament->>DB: Create initial matches
    Tournament->>Blockchain: POST /start
    Note right of Tournament: Start tournament on blockchain
    Blockchain->>Avalanche: Update contract status
    Tournament->>Tournament: Update status to ACTIVE
    Tournament-->>Frontend: Tournament started event
    
    %% Match Play Flow
    Note over User, DB: Playing a Match
    User->>Frontend: Click "Play Match"
    Frontend->>Game: GET /tournament/:tournamentId/match/:matchId
    Note right of Frontend: Open game in new tab/iframe
    Game->>Tournament: GET /matches/:matchId
    Note right of Game: Fetch match details
    Tournament->>DB: Get match & participants
    Tournament-->>Game: {match, players, tournament}
    Game->>Game: Initialize Pong game
    Note right of Game: Load player names, AI settings
    Game-->>User: Start Pong match
    
    %% Game Completion & Result Submission
    Note over User, DB: Match Completion
    User->>Game: Play game to completion
    Game->>Game: Determine winner & scores
    Game->>Game: POST /api/tournament/match/result
    Note right of Game: Submit match result internally
    Game->>Tournament: POST /matches/:id/result
    Note right of Game: {winnerId, player1Score, player2Score}
    Tournament->>DB: Update match result
    Tournament->>Blockchain: POST /match-results
    Note right of Tournament: Record result on blockchain
    Blockchain->>Avalanche: Store match data in contract
    Avalanche-->>Blockchain: Transaction hash
    Blockchain-->>Tournament: {success, txHash}
    
    %% Tournament Progression
    Tournament->>Tournament: Check tournament status
    Alt Tournament continues
        Tournament->>Tournament: Generate next round matches
        Tournament->>DB: Create new matches
        Tournament-->>Frontend: Next round available
    Else Tournament complete
        Tournament->>Tournament: Determine final winner
        Tournament->>DB: Update tournament status
        Tournament->>Blockchain: POST /complete
        Note right of Tournament: Finalize tournament on blockchain
        Blockchain->>Avalanche: Complete tournament contract
        Blockchain-->>Tournament: Final results stored
        Tournament-->>Frontend: Tournament completed
    End
    
    %% Real-time Updates
    Note over User, DB: Real-time Tournament Updates
    Tournament->>Frontend: WebSocket/Polling updates
    Note right of Tournament: Match results, bracket updates
    Frontend->>Frontend: Update tournament display
    Frontend-->>User: Live tournament progress
    
    %% AI Opponent Flow
    Note over User, DB: Playing Against AI
    Alt AI Match
        Game->>Game: Initialize AI opponent
        Note right of Game: AI difficulty from tournament
        Game->>Game: AI vs Human gameplay
        Game->>Game: AI makes calculated moves
        Game-->>Game: Match completion
    Else Human vs Human
        Game->>Game: Multiplayer Pong
        Game-->>Game: Real players control
    End 