/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TournamentScoring {
  export type AchievementStruct = {
    tournamentId: BigNumberish;
    userId: string;
    achievementType: string;
    timestamp: BigNumberish;
    score: BigNumberish;
    proofHash: BytesLike;
  };

  export type AchievementStructOutput = [
    tournamentId: bigint,
    userId: string,
    achievementType: string,
    timestamp: bigint,
    score: bigint,
    proofHash: string
  ] & {
    tournamentId: bigint;
    userId: string;
    achievementType: string;
    timestamp: bigint;
    score: bigint;
    proofHash: string;
  };
}

export interface TournamentScoringInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addParticipant"
      | "completeTournament"
      | "createTournament"
      | "getMatch"
      | "getTournament"
      | "getTournamentCount"
      | "getUserAchievements"
      | "getUserTournaments"
      | "matches"
      | "owner"
      | "recordMatchResult"
      | "renounceOwnership"
      | "startTournament"
      | "tournaments"
      | "transferOwnership"
      | "userAchievements"
      | "userTournaments"
      | "verifiedResults"
      | "verifyMatchResult"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementRecorded"
      | "MatchCompleted"
      | "OwnershipTransferred"
      | "ResultVerified"
      | "TournamentCompleted"
      | "TournamentCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addParticipant",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTournament",
    values: [BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTournament",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTournament",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAchievements",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTournaments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordMatchResult",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTournament",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tournaments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAchievements",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTournaments",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedResults",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMatchResult",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTournaments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordMatchResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tournaments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTournaments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMatchResult",
    data: BytesLike
  ): Result;
}

export namespace AchievementRecordedEvent {
  export type InputTuple = [
    tournamentId: BigNumberish,
    userId: string,
    achievementType: string,
    score: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tournamentId: bigint,
    userId: string,
    achievementType: string,
    score: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tournamentId: bigint;
    userId: string;
    achievementType: string;
    score: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchCompletedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    tournamentId: BigNumberish,
    winnerId: string,
    player1Score: BigNumberish,
    player2Score: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    matchId: bigint,
    tournamentId: bigint,
    winnerId: string,
    player1Score: bigint,
    player2Score: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    matchId: bigint;
    tournamentId: bigint;
    winnerId: string;
    player1Score: bigint;
    player2Score: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultVerifiedEvent {
  export type InputTuple = [
    tournamentId: BigNumberish,
    resultHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tournamentId: bigint,
    resultHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tournamentId: bigint;
    resultHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TournamentCompletedEvent {
  export type InputTuple = [
    tournamentId: BigNumberish,
    winner: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tournamentId: bigint,
    winner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tournamentId: bigint;
    winner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TournamentCreatedEvent {
  export type InputTuple = [
    tournamentId: BigNumberish,
    name: string,
    creator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tournamentId: bigint,
    name: string,
    creator: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tournamentId: bigint;
    name: string;
    creator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TournamentScoring extends BaseContract {
  connect(runner?: ContractRunner | null): TournamentScoring;
  waitForDeployment(): Promise<this>;

  interface: TournamentScoringInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addParticipant: TypedContractMethod<
    [
      tournamentId: BigNumberish,
      userId: string,
      displayName: string,
      participantType: string
    ],
    [void],
    "nonpayable"
  >;

  completeTournament: TypedContractMethod<
    [tournamentId: BigNumberish, winnerId: string, finalPositions: string[]],
    [void],
    "nonpayable"
  >;

  createTournament: TypedContractMethod<
    [name: string, description: string, maxParticipants: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getMatch: TypedContractMethod<
    [matchId: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: bigint;
        tournamentId: bigint;
        round: bigint;
        player1Id: string;
        player2Id: string;
        winnerId: string;
        player1Score: bigint;
        player2Score: bigint;
        completedAt: bigint;
        status: bigint;
        resultHash: string;
      }
    ],
    "view"
  >;

  getTournament: TypedContractMethod<
    [tournamentId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        name: string;
        description: string;
        creator: string;
        createdAt: bigint;
        completedAt: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        status: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  getTournamentCount: TypedContractMethod<[], [bigint], "view">;

  getUserAchievements: TypedContractMethod<
    [userId: string],
    [TournamentScoring.AchievementStructOutput[]],
    "view"
  >;

  getUserTournaments: TypedContractMethod<[userId: string], [bigint[]], "view">;

  matches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: bigint;
        tournamentId: bigint;
        round: bigint;
        player1Id: string;
        player2Id: string;
        winnerId: string;
        player1Score: bigint;
        player2Score: bigint;
        completedAt: bigint;
        status: bigint;
        resultHash: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recordMatchResult: TypedContractMethod<
    [
      tournamentId: BigNumberish,
      round: BigNumberish,
      player1Id: string,
      player2Id: string,
      winnerId: string,
      player1Score: BigNumberish,
      player2Score: BigNumberish,
      resultHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startTournament: TypedContractMethod<
    [tournamentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  tournaments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        name: string;
        description: string;
        creator: string;
        createdAt: bigint;
        completedAt: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        status: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userAchievements: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string] & {
        tournamentId: bigint;
        userId: string;
        achievementType: string;
        timestamp: bigint;
        score: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;

  userTournaments: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  verifiedResults: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifyMatchResult: TypedContractMethod<
    [resultHash: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addParticipant"
  ): TypedContractMethod<
    [
      tournamentId: BigNumberish,
      userId: string,
      displayName: string,
      participantType: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeTournament"
  ): TypedContractMethod<
    [tournamentId: BigNumberish, winnerId: string, finalPositions: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTournament"
  ): TypedContractMethod<
    [name: string, description: string, maxParticipants: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMatch"
  ): TypedContractMethod<
    [matchId: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: bigint;
        tournamentId: bigint;
        round: bigint;
        player1Id: string;
        player2Id: string;
        winnerId: string;
        player1Score: bigint;
        player2Score: bigint;
        completedAt: bigint;
        status: bigint;
        resultHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTournament"
  ): TypedContractMethod<
    [tournamentId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        name: string;
        description: string;
        creator: string;
        createdAt: bigint;
        completedAt: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        status: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTournamentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAchievements"
  ): TypedContractMethod<
    [userId: string],
    [TournamentScoring.AchievementStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTournaments"
  ): TypedContractMethod<[userId: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "matches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: bigint;
        tournamentId: bigint;
        round: bigint;
        player1Id: string;
        player2Id: string;
        winnerId: string;
        player1Score: bigint;
        player2Score: bigint;
        completedAt: bigint;
        status: bigint;
        resultHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordMatchResult"
  ): TypedContractMethod<
    [
      tournamentId: BigNumberish,
      round: BigNumberish,
      player1Id: string,
      player2Id: string,
      winnerId: string,
      player1Score: BigNumberish,
      player2Score: BigNumberish,
      resultHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTournament"
  ): TypedContractMethod<[tournamentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tournaments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        name: string;
        description: string;
        creator: string;
        createdAt: bigint;
        completedAt: bigint;
        maxParticipants: bigint;
        currentParticipants: bigint;
        status: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAchievements"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string] & {
        tournamentId: bigint;
        userId: string;
        achievementType: string;
        timestamp: bigint;
        score: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTournaments"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifiedResults"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyMatchResult"
  ): TypedContractMethod<[resultHash: BytesLike], [boolean], "view">;

  getEvent(
    key: "AchievementRecorded"
  ): TypedContractEvent<
    AchievementRecordedEvent.InputTuple,
    AchievementRecordedEvent.OutputTuple,
    AchievementRecordedEvent.OutputObject
  >;
  getEvent(
    key: "MatchCompleted"
  ): TypedContractEvent<
    MatchCompletedEvent.InputTuple,
    MatchCompletedEvent.OutputTuple,
    MatchCompletedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ResultVerified"
  ): TypedContractEvent<
    ResultVerifiedEvent.InputTuple,
    ResultVerifiedEvent.OutputTuple,
    ResultVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "TournamentCompleted"
  ): TypedContractEvent<
    TournamentCompletedEvent.InputTuple,
    TournamentCompletedEvent.OutputTuple,
    TournamentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TournamentCreated"
  ): TypedContractEvent<
    TournamentCreatedEvent.InputTuple,
    TournamentCreatedEvent.OutputTuple,
    TournamentCreatedEvent.OutputObject
  >;

  filters: {
    "AchievementRecorded(uint256,string,string,uint256,uint256)": TypedContractEvent<
      AchievementRecordedEvent.InputTuple,
      AchievementRecordedEvent.OutputTuple,
      AchievementRecordedEvent.OutputObject
    >;
    AchievementRecorded: TypedContractEvent<
      AchievementRecordedEvent.InputTuple,
      AchievementRecordedEvent.OutputTuple,
      AchievementRecordedEvent.OutputObject
    >;

    "MatchCompleted(uint256,uint256,string,uint256,uint256,uint256)": TypedContractEvent<
      MatchCompletedEvent.InputTuple,
      MatchCompletedEvent.OutputTuple,
      MatchCompletedEvent.OutputObject
    >;
    MatchCompleted: TypedContractEvent<
      MatchCompletedEvent.InputTuple,
      MatchCompletedEvent.OutputTuple,
      MatchCompletedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ResultVerified(uint256,bytes32,uint256)": TypedContractEvent<
      ResultVerifiedEvent.InputTuple,
      ResultVerifiedEvent.OutputTuple,
      ResultVerifiedEvent.OutputObject
    >;
    ResultVerified: TypedContractEvent<
      ResultVerifiedEvent.InputTuple,
      ResultVerifiedEvent.OutputTuple,
      ResultVerifiedEvent.OutputObject
    >;

    "TournamentCompleted(uint256,string,uint256)": TypedContractEvent<
      TournamentCompletedEvent.InputTuple,
      TournamentCompletedEvent.OutputTuple,
      TournamentCompletedEvent.OutputObject
    >;
    TournamentCompleted: TypedContractEvent<
      TournamentCompletedEvent.InputTuple,
      TournamentCompletedEvent.OutputTuple,
      TournamentCompletedEvent.OutputObject
    >;

    "TournamentCreated(uint256,string,address,uint256)": TypedContractEvent<
      TournamentCreatedEvent.InputTuple,
      TournamentCreatedEvent.OutputTuple,
      TournamentCreatedEvent.OutputObject
    >;
    TournamentCreated: TypedContractEvent<
      TournamentCreatedEvent.InputTuple,
      TournamentCreatedEvent.OutputTuple,
      TournamentCreatedEvent.OutputObject
    >;
  };
}
